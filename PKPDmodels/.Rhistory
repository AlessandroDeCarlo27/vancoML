estimate_corr_bounds(c_start)
#estimate indirect correlations
corr_est_results <- prova(c_start)
#show final correlation matrix with estimated values
prova <- corr_est_results$corrMatFinal
plot_graph_corr(c_final,"Graph of Final Correlation Matrix")
#plot correlations estimated
corrplot(c_final, method="color",number.digits = 2,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# hide correlation coefficient on the principal diagonal
diag=T,col.lim = c(20, 30),
col = pal(7))#COL1('YlGn'))
values_corr <- c(1.00,0.86,0.94,0.86,
0.86,1,NA,NA,
0.94,NA,1,1,
0.94,NA,1,1)
varNames <- c("expCrCl","CGeq","MDRDeq","dummy")
c_start <- matrix(values_corr, ncol = 4, nrow = 4)
values_corr <- c(1.00,0.86,0.94,0.86,
0.86,1,NA,NA,
0.94,NA,1,1,
0.94,NA,1,1)
varNames <- c("expCrCl","CGeq","MDRDeq","dummy")
c_start <- matrix(values_corr, ncol = 4, nrow = 4)
rownames(c_start) <- varNames
colnames(c_start)<- varNames
c_start
values_corr <- c(1.00,0.86,0.94,0.86,
0.86,1,NA,NA,
0.94,NA,1,1,
0.94,NA,1,1)
varNames <- c("expCrCl","CGeq","MDRDeq","dummy")
c_start <- matrix(values_corr, ncol = 4, nrow = 4)
c_start
values_corr <- c(1.00,0.86,0.94,0.86,
0.86,1,NA,NA,
0.94,NA,1,1,
0.94,NA,1,1)
varNames <- c("expCrCl","CGeq","MDRDeq","dummy")
c_start <- matrix(values_corr, ncol = 4, nrow = 4)
c_start
library(mvLognCorrEst)
library(corrplot)#plot of matrices
library(RColorBrewer)
prova <- function(corrMatStart,force_estimate=FALSE){
#VALIDATE INPUT
#validate_corrMatrix(corrMatStart)
#indirect correlations to estimate must be declared with NA inside the input matrix
if(!any(is.na(corrMatStart))){
stop("No indirect correlations to estimate are declared")
}
#bounds of correlation matrix
bounds <- estimate_corr_bounds(corrMatStart)
#test if all bounds are NA: this implies that all indirect correlations estimates will be set to 0
if(all(is.na(bounds[,3]))&&all(is.na(bounds[,4]))){
list_variables <- paste(paste(bounds[,1],bounds[,2],sep="--"),collapse = " ")
warning(paste("Cannot estimate indirect correlations, paths between all indicated variables are missing:\n",list_variables,sep=""))
plot_graph_corr(corrMatStart,'Independet Variables')
matOpt <- get_corrMatrixOptim(NULL,corrMatStart,bounds)
output_optim <- list()
output_optim[["corrMatFinal"]]<-matOpt
return(output_optim)
}
#set to 0 correlations to be estimated
corrMatStart[is.na(corrMatStart)]<-0
# get indices of couples for which an indirect effect exists according to
#graph path analysis
notNa_idx <- !(is.na(bounds[,3])&is.na(bounds[,4]))
x0 <- bounds[notNa_idx,3]+(sign(bounds[notNa_idx,3])*
((abs(bounds[notNa_idx,4])-abs(bounds[notNa_idx,3]))/2))
#solve constrained optimization problem
r <- pracma::fmincon(x0,optim.fun,lb=bounds[notNa_idx,3],
ub=bounds[notNa_idx,4],cbase=corrMatStart,
var_optim=bounds)
#compute correlation matrix with estimated indirect correlations
corrMatfinal <- get_corrMatrixOptim(r$par,corrMatStart,bounds)
output_optim <- list()
output_optim[["optimizationBounds"]] <-bounds
if(r$val<0){
#optimization successfull
output_optim[["optim"]]<-r
output_optim[["corrMatFinal"]] <- corrMatfinal
return(output_optim)
}else{
if(force_estimate){
warning("Optimization step-1 failed. Matrix obtained is not positive-semidefinite.
Matrix of step-1 will be approximated to its nearest positive definite correlation matrix.
This may change fixed correlations.")
output_optim[["optim1"]] <-r
r2 <- Matrix::nearPD(corrMatfinal,corr = TRUE)
output_optim[["optim2"]] <-r2
output_optim[["corrMatFinal"]] <- as.matrix(r2$mat)
}else{
warning("Optimization step-1 failed. Matrix obtained is not positive-semidefinite.
To approximate Matrix of step-1 to its nearest positive definite correlation matrix set force_estimate=TRUE")
output_optim[["optim"]]<-r
output_optim[["corrMatFinal"]] <- corrMatfinal
}
}
return(output_optim)
}
values_corr <- c(1.00,0.86,0.94,0.94,
0.86,1,NA,NA,
0.94,NA,1,1,
0.94,NA,1,1)
varNames <- c("expCrCl","CGeq","MDRDeq","dummy")
c_start <- matrix(values_corr, ncol = 4, nrow = 4)
rownames(c_start) <- varNames
colnames(c_start)<- varNames
colori <- brewer.pal(7, "Set3")
pal <- colorRampPalette(colori)
#plot correlation graph
plot_graph_corr(c_start,"Graph of Initial Correlation Matrix")
#alternative correlation matrix plot
#COL1(sequential = c("Oranges", "Purples", "Reds", "Blues", "Greens",
#                  "Greys", "OrRd", "YlOrRd", "YlOrBr", "YlGn"), n = 200)
corrplot(c_start, method="color",number.digits = 2,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# hide correlation coefficient on the principal diagonal
diag=T,col.lim = c(20, 30),
col = pal(7))#COL1('YlGn'))
#get bounds of correlations
estimate_corr_bounds(c_start)
#estimate indirect correlations
corr_est_results <- prova(c_start)
#show final correlation matrix with estimated values
prova <- corr_est_results$corrMatFinal
plot_graph_corr(c_final,"Graph of Final Correlation Matrix")
#plot correlations estimated
corrplot(c_final, method="color",number.digits = 2,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# hide correlation coefficient on the principal diagonal
diag=T,col.lim = c(20, 30),
col = pal(7))#COL1('YlGn'))
library(mvLognCorrEst)
library(corrplot)#plot of matrices
library(RColorBrewer)
prova <- function(corrMatStart,force_estimate=FALSE){
#VALIDATE INPUT
#validate_corrMatrix(corrMatStart)
#indirect correlations to estimate must be declared with NA inside the input matrix
if(!any(is.na(corrMatStart))){
stop("No indirect correlations to estimate are declared")
}
#bounds of correlation matrix
bounds <- estimate_corr_bounds(corrMatStart)
#test if all bounds are NA: this implies that all indirect correlations estimates will be set to 0
if(all(is.na(bounds[,3]))&&all(is.na(bounds[,4]))){
list_variables <- paste(paste(bounds[,1],bounds[,2],sep="--"),collapse = " ")
warning(paste("Cannot estimate indirect correlations, paths between all indicated variables are missing:\n",list_variables,sep=""))
plot_graph_corr(corrMatStart,'Independet Variables')
matOpt <- get_corrMatrixOptim(NULL,corrMatStart,bounds)
output_optim <- list()
output_optim[["corrMatFinal"]]<-matOpt
return(output_optim)
}
#set to 0 correlations to be estimated
corrMatStart[is.na(corrMatStart)]<-0
# get indices of couples for which an indirect effect exists according to
#graph path analysis
notNa_idx <- !(is.na(bounds[,3])&is.na(bounds[,4]))
x0 <- bounds[notNa_idx,3]+(sign(bounds[notNa_idx,3])*
((abs(bounds[notNa_idx,4])-abs(bounds[notNa_idx,3]))/2))
#solve constrained optimization problem
r <- pracma::fmincon(x0,optim.fun,lb=bounds[notNa_idx,3],
ub=bounds[notNa_idx,4],cbase=corrMatStart,
var_optim=bounds)
#compute correlation matrix with estimated indirect correlations
corrMatfinal <- get_corrMatrixOptim(r$par,corrMatStart,bounds)
output_optim <- list()
output_optim[["optimizationBounds"]] <-bounds
if(r$val<0){
#optimization successfull
output_optim[["optim"]]<-r
output_optim[["corrMatFinal"]] <- corrMatfinal
return(output_optim)
}else{
if(force_estimate){
warning("Optimization step-1 failed. Matrix obtained is not positive-semidefinite.
Matrix of step-1 will be approximated to its nearest positive definite correlation matrix.
This may change fixed correlations.")
output_optim[["optim1"]] <-r
r2 <- Matrix::nearPD(corrMatfinal,corr = TRUE)
output_optim[["optim2"]] <-r2
output_optim[["corrMatFinal"]] <- as.matrix(r2$mat)
}else{
warning("Optimization step-1 failed. Matrix obtained is not positive-semidefinite.
To approximate Matrix of step-1 to its nearest positive definite correlation matrix set force_estimate=TRUE")
output_optim[["optim"]]<-r
output_optim[["corrMatFinal"]] <- corrMatfinal
}
}
return(output_optim)
}
values_corr <- c(1.00,0.86,0.94,0.94,
0.86,1,NA,NA,
0.94,NA,1,1,
0.94,NA,1,1)
varNames <- c("expCrCl","CGeq","MDRDeq","dummy")
c_start <- matrix(values_corr, ncol = 4, nrow = 4)
rownames(c_start) <- varNames
colnames(c_start)<- varNames
colori <- brewer.pal(7, "Set3")
pal <- colorRampPalette(colori)
#plot correlation graph
plot_graph_corr(c_start,"Graph of Initial Correlation Matrix")
#alternative correlation matrix plot
#COL1(sequential = c("Oranges", "Purples", "Reds", "Blues", "Greens",
#                  "Greys", "OrRd", "YlOrRd", "YlOrBr", "YlGn"), n = 200)
corrplot(c_start, method="color",number.digits = 2,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# hide correlation coefficient on the principal diagonal
diag=T,col.lim = c(20, 30),
col = pal(7))#COL1('YlGn'))
#get bounds of correlations
estimate_corr_bounds(c_start)
#estimate indirect correlations
corr_est_results <-estimate_indirect_corr(c_start)
#show final correlation matrix with estimated values
prova <- corr_est_results$corrMatFinal
plot_graph_corr(c_final,"Graph of Final Correlation Matrix")
#plot correlations estimated
corrplot(c_final, method="color",number.digits = 2,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# hide correlation coefficient on the principal diagonal
diag=T,col.lim = c(20, 30),
col = pal(7))#COL1('YlGn'))
View(corr_est_results)
corr_est_results[["corrMatFinal"]]
library(mvLognCorrEst)
library(corrplot)#plot of matrices
library(RColorBrewer)
prova <- function(corrMatStart,force_estimate=FALSE){
#VALIDATE INPUT
#validate_corrMatrix(corrMatStart)
#indirect correlations to estimate must be declared with NA inside the input matrix
if(!any(is.na(corrMatStart))){
stop("No indirect correlations to estimate are declared")
}
#bounds of correlation matrix
bounds <- estimate_corr_bounds(corrMatStart)
#test if all bounds are NA: this implies that all indirect correlations estimates will be set to 0
if(all(is.na(bounds[,3]))&&all(is.na(bounds[,4]))){
list_variables <- paste(paste(bounds[,1],bounds[,2],sep="--"),collapse = " ")
warning(paste("Cannot estimate indirect correlations, paths between all indicated variables are missing:\n",list_variables,sep=""))
plot_graph_corr(corrMatStart,'Independet Variables')
matOpt <- get_corrMatrixOptim(NULL,corrMatStart,bounds)
output_optim <- list()
output_optim[["corrMatFinal"]]<-matOpt
return(output_optim)
}
#set to 0 correlations to be estimated
corrMatStart[is.na(corrMatStart)]<-0
# get indices of couples for which an indirect effect exists according to
#graph path analysis
notNa_idx <- !(is.na(bounds[,3])&is.na(bounds[,4]))
x0 <- bounds[notNa_idx,3]+(sign(bounds[notNa_idx,3])*
((abs(bounds[notNa_idx,4])-abs(bounds[notNa_idx,3]))/2))
#solve constrained optimization problem
r <- pracma::fmincon(x0,optim.fun,lb=bounds[notNa_idx,3],
ub=bounds[notNa_idx,4],cbase=corrMatStart,
var_optim=bounds)
#compute correlation matrix with estimated indirect correlations
corrMatfinal <- get_corrMatrixOptim(r$par,corrMatStart,bounds)
output_optim <- list()
output_optim[["optimizationBounds"]] <-bounds
if(r$val<0){
#optimization successfull
output_optim[["optim"]]<-r
output_optim[["corrMatFinal"]] <- corrMatfinal
return(output_optim)
}else{
if(force_estimate){
warning("Optimization step-1 failed. Matrix obtained is not positive-semidefinite.
Matrix of step-1 will be approximated to its nearest positive definite correlation matrix.
This may change fixed correlations.")
output_optim[["optim1"]] <-r
r2 <- Matrix::nearPD(corrMatfinal,corr = TRUE)
output_optim[["optim2"]] <-r2
output_optim[["corrMatFinal"]] <- as.matrix(r2$mat)
}else{
warning("Optimization step-1 failed. Matrix obtained is not positive-semidefinite.
To approximate Matrix of step-1 to its nearest positive definite correlation matrix set force_estimate=TRUE")
output_optim[["optim"]]<-r
output_optim[["corrMatFinal"]] <- corrMatfinal
}
}
return(output_optim)
}
values_corr <- c(1.00,0.86,0.94,0.94,
0.86,1,NA,NA,
0.94,NA,0.99,1,
0.94,NA,0.99,1)
varNames <- c("expCrCl","CGeq","MDRDeq","dummy")
c_start <- matrix(values_corr, ncol = 4, nrow = 4)
rownames(c_start) <- varNames
colnames(c_start)<- varNames
colori <- brewer.pal(7, "Set3")
pal <- colorRampPalette(colori)
#plot correlation graph
plot_graph_corr(c_start,"Graph of Initial Correlation Matrix")
#alternative correlation matrix plot
#COL1(sequential = c("Oranges", "Purples", "Reds", "Blues", "Greens",
#                  "Greys", "OrRd", "YlOrRd", "YlOrBr", "YlGn"), n = 200)
corrplot(c_start, method="color",number.digits = 2,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# hide correlation coefficient on the principal diagonal
diag=T,col.lim = c(20, 30),
col = pal(7))#COL1('YlGn'))
#get bounds of correlations
estimate_corr_bounds(c_start)
#estimate indirect correlations
corr_est_results <-estimate_indirect_corr(c_start)
#show final correlation matrix with estimated values
prova <- corr_est_results$corrMatFinal
plot_graph_corr(c_final,"Graph of Final Correlation Matrix")
#plot correlations estimated
corrplot(c_final, method="color",number.digits = 2,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# hide correlation coefficient on the principal diagonal
diag=T,col.lim = c(20, 30),
col = pal(7))#COL1('YlGn'))
View(corr_est_results)
eig(corr_est_results$corrMatFinal)
eigen(corr_est_results$corrMatFinal)
eigen(corr_est_results$corrMatFinal)$values[4]
debugSource('C:/Users/AlessandroDeCarlo/Desktop/DT/projs/est.R')
bounds
r <- pracma::fminbnd(x0,optim.fun,a=bounds[notNa_idx,3],
b=bounds[notNa_idx,4])
optim.fun
debugSource('C:/Users/AlessandroDeCarlo/Desktop/DT/projs/est.R')
debugSource('C:/Users/AlessandroDeCarlo/Desktop/DT/projs/est.R')
r <- pracma::fminbnd(x0,optim.fun,a = bounds[notNa_idx,
3], b = bounds[notNa_idx, 4], cbase = corrMatStart,
var_optim = bounds)
optim.fun()
r <- pracma::fminbnd(x0,optim.fun,a = bounds[notNa_idx,
3], b = bounds[notNa_idx, 4], cbase = corrMatStart,
var_optim = bounds)
x0
r <- pracma::fminbnd(optim.fun,a = bounds[notNa_idx,
3], b = bounds[notNa_idx, 4], cbase = corrMatStart,
var_optim = bounds)
r
get_corrMatrixOptim(r$xmin, corrMatStart,
bounds)
eigen(get_corrMatrixOptim(r$xmin, corrMatStart,
bounds))
get_corrMatrixOptim(r$xmin, corrMatStart,
bounds)
r
###### PREAMBLE ########################################################
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
library(dplyr)
library(ggplot2)
library(data.table)
library(RColorBrewer)
library(corrplot)#plot of matrices
library(ggpubr)
library(grid)
######### LOAD DATA SOURCES #############################################
model2 <- read.csv("1cmt_V_wt_CL_age_cr_sex_prop/vanco_1cmt_V_wt_CL_age_cr_sex_prop/LogLikelihood/individualLL.txt")
View(model2)
sum(model2$importanceSampling)
###### PREAMBLE ########################################################
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
library(dplyr)
library(ggplot2)
library(data.table)
library(RColorBrewer)
library(corrplot)#plot of matrices
library(ggpubr)
library(grid)
######### LOAD DATA SOURCES #############################################
model2 <- read.csv("1cmt_V_wt_CL_age_cr_sex_prop/vanco_1cmt_V_wt_CL_age_cr_sex_prop/LogLikelihood/individualLL.txt")
ffc <- read.csv("1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/vanco_1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/LogLikelihood/individualLL.txt")
roberts <- read.csv("0_Literature_Models/Roberts/Roberts_add_originalCV/roberts_add_originalCV/LogLikelihood/individualLL.txt")
View(roberts)
View(model2)
View(ffc)
model2 %>% filter(id==c(114,128,219,353,992))
View(ffc)
model2 %>% filter(all(c(114,128,219,353,992)),id)
model2 %>% filter(c(114,128,219,353,992) %in% id)
model2 %>% filter(all(c(114,128,219,353,992)) %in% id)
model2 %>% filter(id %in% c(114,128,219,353,992))
ffc %>% filter(id %in% c(114,128,219,353,992))
model2 %>% filter(id %in% c(283,325,546,704,823))
roberts %>% filter(id %in% c(283,325,546,704,823))
roberts %>% filter(id %in% c(285,313,618,704,503))
model2 %>% filter(id %in% c(285,313,618,704,503))
ffc %>% filter(id %in% c(283,325,588,704,823))
ffc %>% filter(id %in% c(114,313,353,503))
roberts %>% filter(id %in% c(283,325,588,704,823))
roberts %>% filter(id %in% c(114,313,353,503))
installed.packages("ramify")
installed.packages("ramify")
install.packages("ramify")
###### PREAMBLE ########################################################
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
library(dplyr)
library(ggplot2)
library(data.table)
library(RColorBrewer)
library(corrplot)#plot of matrices
library(ggpubr)
library(grid)
library(ramify)
######### LOAD DATA SOURCES #############################################
model2 <- read.csv("1cmt_V_wt_CL_age_cr_sex_prop/vanco_1cmt_V_wt_CL_age_cr_sex_prop/LogLikelihood/individualLL.txt")
ffc <- read.csv("1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/vanco_1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/LogLikelihood/individualLL.txt")
roberts <- read.csv("0_Literature_Models/Roberts/Roberts_add_originalCV/roberts_add_originalCV/LogLikelihood/individualLL.txt")
as.matrix(cbind(model2$importanceSampling,ffc$importanceSampling,roberts$importanceSampling))
argmin(as.matrix(cbind(model2$importanceSampling,ffc$importanceSampling,roberts$importanceSampling)))
View(roberts)
m <- as.matrix(cbind(model2$importanceSampling,ffc$importanceSampling,roberts$importanceSampling))
View(m)
View(model2)
###### PREAMBLE ########################################################
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
library(dplyr)
library(ggplot2)
library(data.table)
library(RColorBrewer)
library(corrplot)#plot of matrices
library(ggpubr)
library(grid)
library(ramify)
######### LOAD DATA SOURCES #############################################
model2 <- read.csv("1cmt_V_wt_CL_age_cr_sex_prop/vanco_1cmt_V_wt_CL_age_cr_sex_prop/LogLikelihood/individualLL.txt")
ffc <- read.csv("1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/vanco_1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/LogLikelihood/individualLL.txt")
roberts <- read.csv("0_Literature_Models/Roberts/Roberts_add_originalCV/roberts_add_originalCV/LogLikelihood/individualLL.txt")
m_ll <- as.matrix(cbind(model2$importanceSampling,ffc$importanceSampling,roberts$importanceSampling))
colnames(m_ll) <- c("Model2","FFC","Roberts")
View(m_ll)
argmin(m_ll,rows = FALSE)
model2 <- read.csv("1cmt_V_wt_CL_age_cr_sex_prop/vanco_1cmt_V_wt_CL_age_cr_sex_prop/LogLikelihood/individualLL.txt")
ffc <- read.csv("1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/vanco_1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/LogLikelihood/individualLL.txt")
roberts <- read.csv("0_Literature_Models/Roberts/Roberts_add_originalCV/roberts_add_originalCV/LogLikelihood/individualLL.txt")
mod_names <-  c("Model2","FFC","Roberts")
m_ll <- as.matrix(cbind(model2$importanceSampling,ffc$importanceSampling,roberts$importanceSampling))
colnames(m_ll) <- mod_names
amins <- argmin(m_ll,rows = T)
as.factor(mod_names)
amins_names <- mod_names[amins]
amins_names <- as.factor(mod_names[amins])
barplot(amins_names)
amins_names <- data.frame(BestModel = as.factor(mod_names[amins]))
View(amins_names)
p<-ggplot(data=amins_names, aes(x=BestModel)) +
geom_bar(stat="identity")
p<-ggplot(data=amins_names, aes(x=BestModel)) +
geom_bar(stat="identity")
plot(p)
p<-ggplot(data=amins_names, aes(x=BestModel)) +
geom_bar(stat="bin")
plot(p)
p<-ggplot(data=amins_names, aes(x=BestModel)) +
geom_bar(stat="count")
plot(p)
p<-ggplot(data=amins_names, aes(x=BestModel,fill=BestModel)) +
geom_bar(stat="count")
plot(p)
###### PREAMBLE ########################################################
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
library(dplyr)
library(ggplot2)
library(data.table)
library(RColorBrewer)
library(corrplot)#plot of matrices
library(ggpubr)
library(grid)
library(ramify)
######### LOAD DATA SOURCES #############################################
model2 <- read.csv("1cmt_V_wt_CL_age_cr_sex_prop/vanco_1cmt_V_wt_CL_age_cr_sex_prop/LogLikelihood/individualLL.txt")
ffc <- read.csv("1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/vanco_1cmt_fullCovs_NO_LAcl_HCTv_SEXv_AGcl_prop/LogLikelihood/individualLL.txt")
roberts <- read.csv("0_Literature_Models/Roberts/Roberts_add_originalCV/roberts_add_originalCV/LogLikelihood/individualLL.txt")
############# Graphical Constant ########################################
fontsz.grid <- theme(text= element_text(size=22),
plot.title =  element_text(hjust = 0.5),
panel.background = element_rect(fill = "#f9f9f9"
,colour = "#f9f9f9",
size = 0.5,
linetype = "solid"),
panel.grid.major = element_line(size = 0.5,
linetype = 'solid',
colour = "gray"),
panel.grid.minor = element_line(size = 0.25,
linetype = 'solid',
colour = "gray"))
#################### best model 4 each subj #################################
mod_names <-  c("Model2","FFC","Roberts")
m_ll <- as.matrix(cbind(model2$importanceSampling,ffc$importanceSampling,roberts$importanceSampling))
colnames(m_ll) <- mod_names
amins <- argmin(m_ll,rows = T)
amins_names <- data.frame(BestModel = as.factor(mod_names[amins]))
p<-ggplot(data=amins_names, aes(x=BestModel,fill=BestModel)) +
geom_bar(stat="count") + fontsz.grid
plot(p)
